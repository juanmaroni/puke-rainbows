# Create Tag and Release for the latest version
# Build binaries for Windows, Linux and macOS with native zip types
name: Create Tag and Release with binaries

on:
  workflow_dispatch:

jobs:
  check-tag:
    name: Check Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Set Tag name from app version
        id: set-tag
        run: |
          echo "TAG=v$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_ENV
          echo "TAG=v$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Check if Tag already exists
        run: |
          echo "Current Tag is ${TAG}"

          if git ls-remote --tags | grep -q ${TAG}; then
            echo "Tag ${TAG} already exists."
            echo "::error ::Tag ${TAG} already exists."
            exit 1
          fi

  upload-assets:
    name: Upload ${{ matrix.target }}
    needs: check-tag
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
          
          - target: x86_64-unknown-linux-musl
            archive: tar.gz tar.xz tar.zst
          
          - target: x86_64-apple-darwin
            archive: zip
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Build
        uses: rust-build/rust-build.action@v1.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          ARCHIVE_TYPES: ${{ matrix.archive }}
          ARCHIVE_NAME: ${{ matrix.target }}
          UPLOAD_MODE: none

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ./output/${{ matrix.target }}*
          if-no-files-found: error

  release:
    name: Create release with artifacts
    needs: [check-tag, upload-assets]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create a release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.check-tag.outputs.tag }}
          name: ${{ needs.check-tag.outputs.tag }}
          artifacts: artifacts/*/*

  check_jobs:
    name: Check jobs
    needs: [check-tag, upload-assets, release]
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ $(jobs -r -p) ]]; then
            echo "A job failed!"
            exit 1
          fi
